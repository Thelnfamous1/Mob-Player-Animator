plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
}
base {
    archivesName = "${mod_id}-forge-${minecraft_version}"
}
mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url 'https://maven.fabricmc.net/'}
    flatDir {
        dirs 'lib'
    }
    maven {
        url "https://cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
    //annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
    annotationProcessor 'net.fabricmc:sponge-mixin:0.13.4+mixin.0.8.5'
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${project.mixin_extras_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${project.mixin_extras_version}")){
        jarJar.ranged(it, "[${project.mixin_extras_version},)")
    }
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${project.player_anim_version}")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")

    runtimeOnly fg.deobf("lib:bettermobcombat-forge:${project.better_mob_combat_version}")

    // Better Mob Combat Dependencies
    runtimeOnly fg.deobf("maven.modrinth:better-combat:${project.better_combat_version}-forge")
    runtimeOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")

    // Mod Compatibility
    implementation fg.deobf("maven.modrinth:guard-villagers:${project.guard_villagers_version}")
    implementation fg.deobf("maven.modrinth:entity-model-features:${project.emf_version}")
    implementation fg.deobf("maven.modrinth:entitytexturefeatures:${project.etf_version}-forge")
    runtimeOnly fg.deobf("curse.maven:all-bark-all-bite-833755:4817227")
    runtimeOnly fg.deobf("maven.modrinth:serious-player-animations:${project.spa_version}-forge")
    runtimeOnly fg.deobf("maven.modrinth:not-enough-animations:${project.nea_version}")
    runtimeOnly fg.deobf("maven.modrinth:minecraft-comes-alive-reborn:${mcar_version}")
    runtimeOnly fg.deobf("maven.modrinth:architectury-api:${architectury_version}")
    runtimeOnly fg.deobf("maven.modrinth:bendy-lib:${bendylib_version}-forge")
    runtimeOnly(fg.deobf("maven.modrinth:simply-swords:${simply_swords_version}-forge"))
    implementation fg.deobf("maven.modrinth:villager-recruits:${recruits_version}")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
    configure(options) {
        tags(
                'apiNote:a:"API Note:"',
                'implNote:a:"Implementation Note:"'
        )
    }
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
